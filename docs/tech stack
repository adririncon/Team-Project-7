We considered Node.js and Django for our project's technology stack. At first, we were leaning towards using Node.js because, while researching both
frameworks, we found that Node.js had a muhc larger online community, which we thought would be helpful if we can upon any issues or questions during
the development of our app. Additionally, we liked that Node.js would enable us to use the same language throughout the process, on both the front and
back ends. We thought that this would simplify our process and allow for more collaboration between group members working on different parts of the app.
However, we ended up reconsidering this decision and deciding to use Django instead. While we liked the consistency of Node.js across the front and back
ends, most of our group is not familiar with JavaScript. We had originally planned to write the backend code for our application in Python, and since
Django is based on Python, Django was more aligned with our plans. Although we thought using one language for the front and back end would streamline our
process, we decided that the time it would take for our whole group to learn JavaScript would negate any time saved by using Node.js and one language for
the whole application. Additionally, much of what we read about Django said that it focused on rapid development, which we thought further widened the gap
between how long it would take us to develop our app in Node.js (including learning JS) and how long it would taking us using Django. We also found that 
Django, while it had a smaller online community than Node.js, still had consistent and detailed documentation, which we thought would be sufficient for
any difficulties we encountered. Finally, Django uses a derivative of the model-view-controller model, which we all felt comfortable and familiar with.
